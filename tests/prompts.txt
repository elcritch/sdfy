
# Prompt add sdf function

Great, now implement a new type in `sdftypes.nim` and implement a new func in `shapes.nim` for the following GLSL function below.  Add tests to `tests1.nim`. Don't summarize the results. Don't worry about implementing the SIMD version yet. Don't create new tests, just use `test1.nim` for testing.

```
float sdCircle( vec2 p, float r )
{
    return length(p) - r;
}
```

# Prompt add simd version

Great, next implement the `sdCircle` function in `shapesSimd.nim` following the patterns established there using NEON SIMD. Then add it to the `drawSdfShape`. You don't need to update the tests1.nim file. Just run `tests1_simd.nim` as it will run the SIMD versions of test1.nim automatically. Don't call the falback non-SIMD version, just note if you're unable to implement a SIMD variant. Don't add anything to the fallback simd `fallbackShapesNeon.nim` either. 

# Prompt README

Please update the README with the new SDF shapes that have been added recently. Update the performance table as well. Don't add any more images. Keep the Pixie Shadow example in the performance table to show why SDF functions are helpful.

# Prompt 

Please update the SIMD `drawSdfShapeNeon` and `drawSdfShapeSse2` versions of `drawSdfShape` to match the new args. Just run `tests1_simd.nim` as it will run the SIMD versions of `test1.nim` automatically.

## Prompt

Great, next implement the `sdCircle` function in `shapesSimd.nim` following the patterns established there.
Then add it to the `drawSdfShape`.
You don't need to update the tests1.nim file. Just run `tests1_simd.nim` as it will run the SIMD versions of test1.nim automatically.

## Prompt

Please update the Neon and SSE2 SIMD `drawSdfShapeNeon` `drawSdfShapeSse2` procs to match `drawSdfShape` proc. There's a couple of new `SDFMode` cases like `sdfModeAnnular. Follow the patterns in `drawSdfShapeNeon.nim` regarding Neon SIMD. The test file to run is `tests/test1_simd.nim` which runs the same tests as `test1.nim` but with SIMD. 
